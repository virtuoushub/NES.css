@mixin span-style($color, $background, $option, $width: 50%) {
  position: absolute;
  top: 0;
  width: $width;
  color: $color;
  background-color: $background;

  @if $option == left {
    left: 0;
  } @else if $option == right {
    right: 0;
  }
}

@mixin badge-style($color, $background, $is-splited: true) {
  $box-shadow-first-two: 0 0.5em $background, 0 -0.5em $background;

  @if $is-splited == true {
    &:first-child {
      @include span-style($color, $background, left);

      box-shadow: $box-shadow-first-two, 0 0 $background, -0.5em 0 $background;
    }
    &:last-child {
      @include span-style($color, $background, right);

      box-shadow: $box-shadow-first-two, 0.5em 0 $background, 0 0 $background;
    }
  } @else {
    &:first-child {
      @include span-style($color, $background, 0, 100%);

      box-shadow: $box-shadow-first-two, 0.5em 0 $background, -0.5em 0 $background;
    }
  }
}

@mixin setup($px) {
  width: $px * 14;
  height: $px;
  font-size: $px * 1.2;
  line-height: 1.5;
}

// Default style
.nes-badge {
  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.75em;
  margin: 4px;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: $cursor-click-url;
  user-select: none;
  border: none;
  @include setup(7px);

  // Other styles
  // prettier-ignore
  $types:
    "dark" $background-color $base-color,
    "primary" $background-color map-get($primary-colors, "normal"),
    "success" $background-color map-get($success-colors, "normal"),
    "warning" $base-color map-get($warning-colors, "normal"),
    "error" $background-color map-get($error-colors, "normal");

  @each $type in $types {
    &.is-splited {
      & span.is-#{nth($type, 1)} {
        @include badge-style(nth($type, 2), nth($type, 3));
      }
    }

    & span.is-#{nth($type, 1)} {
      @include badge-style(nth($type, 2), nth($type, 3), false);
    }
  }

  // Other sizes
  // prettier-ignore
  $sizes:
    "small" 5px,
    "medium" 7px,
    "large" 9px;

  @each $size in $sizes {
    &.is-#{nth($size, 1)} {
      @include setup(nth($size, 2));
    }
  }
}
